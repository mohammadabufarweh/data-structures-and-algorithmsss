/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }
    @Test public void addTest(){
        HashTable<String>ht=new HashTable<>(1024);
        ht.add(11,"amman");
        ht.add(51,"zarqa");
        ht.add(1,"irbid");
        assertEquals("zarqa",(ht.get(51)));
        assertEquals("irbid",(ht.get(1)));
    }
    @Test public void  keyThatDoesNotExist(){
        HashTable<String>ht=new HashTable<>(1024);
        ht.add(17,"amman");

        assertEquals(null,(ht.get(19)));
    }

@Test public void collision(){
    HashTable<String>ht=new HashTable<>(1024);
    ht.add(17,"amman");
    assertEquals("amman",(ht.get(17)));
    ht.add(17,"zarqa");
    assertEquals("zarqa",(ht.get(17)));

}
@Test public void hashTest(){
    HashTable<String>ht=new HashTable<>(1024);
    ht.hash(1000);
    assertEquals(984,ht.hash(1000));
}
    @Test public void word(){
        String text1 = "Once upon a time, there was a brave princess who";
        String text2 ="It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...";
        String text3="It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York...";
        RepeatedWord repeatedWord=new RepeatedWord();
        repeatedWord.repeatWord(text1);
        repeatedWord.repeatWord(text2);
        repeatedWord.repeatWord(text3);

        assertEquals("a",repeatedWord.repeatWord(text1));
        assertEquals("it",repeatedWord.repeatWord(text2));
        assertEquals("summer",repeatedWord.repeatWord(text3));
    }
    @Test public void treeIntersection(){
        BinaryTree tree1=new BinaryTree();
        BinaryTree tree2=new BinaryTree();

        tree1.root = new NodeTree(8);
        tree1.root.left = new NodeTree<>(17);
        tree1.root.right = new NodeTree<>(22);
        tree1.root.right.right = new NodeTree<>(43);
        tree1.root.right.left = new NodeTree<>(51);

        tree2.root = new NodeTree<>(8);
        tree2.root.left = new NodeTree<>(17);
        tree2.root.right = new NodeTree<>(25);
        tree2.root.right.right = new NodeTree<>(40);
        tree2.root.right.left = new NodeTree<>(55);
        HashMapTreeIntersection hashMapTreeIntersection=new HashMapTreeIntersection();
        String test = null;
        assertEquals("[8, 17]",hashMapTreeIntersection.treeIntersection(tree1 , tree2).toString());
    }
    @Test public void testLeftJoin(){
        HashTable<String> table1 = new HashTable<>(10);
        HashTable<String> table2 = new HashTable<>(10);
        table1.add(1, "mohammad");
        table1.add(2, "ammar");
        table1.add(3, "mohammad");
        table1.add(4, "hanaa");
        table1.add(5, "nahla");
        table1.add(6, "java");

        table2.add(1, "khaled");
        table2.add(2, "al hariry");
        table2.add(3, "meqdad");
        table2.add(4, "matrouq");
        table2.add(5, "al");
        table2.add(6, "401");
        assertEquals("[[1, mohammad, khaled], [2, ammar, al hariry], [3, mohammad, meqdad], [4, hanaa, matrouq], [5, nahla, al], [6, java, 401]]",new App().leftJoin(table1,table2).toString());
    }
}
