import java.util.Arrays;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());


        Graph <Integer> graph=new Graph <Integer>(10);
graph.addNewEdge(0, 1);
graph.addNewEdge(0, 4);
graph.addNewEdge(1, 2);
graph.addNewEdge(1, 3);
graph.addNewEdge(1, 4);
graph.addNewEdge(2, 3);
graph.addNewEdge(2, 4);
graph.addNewEdge(3, 0);
graph.addNewEdge(2, 0);
graph.addNewNode(5);
        System.out.println(graph.getNodes());

  System.out.println("Adjacency List for the graph:\n"+ graph.toString());
        System.out.println(graph.getNeighbors(1));
        System.out.println("number of nodes "+graph.size());



        Graph g = new Graph(4);

        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);

        System.out.println(g.breadthFirst(2));
         String pandora="1";
        String Arnedla="2";
        String Monstropolis="3";
        String Metroville="4";
        String Naboo="5";
        String Narnia="6";
        List<Graph.Edge> edges = Arrays.asList(new Graph.Edge(pandora, Arnedla,1), new Graph.Edge(Arnedla, Monstropolis,10) , new Graph.Edge(Monstropolis, Metroville,10));
        Graph.Graphh graphh = new Graph.Graphh(edges);
        System.out.println( Graph.Graphh.businessTrip(graphh));
        int res=0;
        for (int i =0  ;i<graphh.w.size();i++){
            res= res+ (int) graphh.w.get(i);
        }
        System.out.println(res+"$");



        DepthFirstSearch depthFirstSearch = new DepthFirstSearch(10);
//add edges to the graph
        depthFirstSearch.addNewEdge(1, 2);
        depthFirstSearch.addNewEdge(2, 3);
        depthFirstSearch.addNewEdge(3, 4);
        depthFirstSearch.addNewEdge(4, 5);
        depthFirstSearch.addNewEdge(5, 7);
        depthFirstSearch.addNewEdge(1, 3);
        depthFirstSearch.addNewEdge(1, 5);
        depthFirstSearch.addNewEdge(5, 5);
        depthFirstSearch.addNewEdge(2, 6);
        depthFirstSearch.addNewEdge(3, 7);

        System.out.println("Depth-first traversal of graph is: ");
//traversal starts from the node 3 (as root node)
        depthFirstSearch.depthFirst(1);
    }
}